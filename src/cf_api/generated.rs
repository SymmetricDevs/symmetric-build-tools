use crate::cf_enum;
use serde::{Deserialize, Serialize};
use serde_repr::Serialize_repr;

use super::CFString;
/*
* DO NOT EDIT THIS FILE MANUALLY
* IT WAS GENERATED USING tools/struct_gen.py
* To change enums default values, add the enum name and the default value to tools/enum_default_overrides.json
*/

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Mod {
    // The mod id
    pub id: i64,
    // The game id this mod is for
    #[serde(rename = "gameId")]
    pub game_id: i64,
    // The name of the mod
    pub name: CFString,
    // The mod slug that would appear in the URL
    pub slug: CFString,
    // Relevant links for the mod such as Issue tracker and Wiki
    pub links: ModLinks,
    // Mod summary
    pub summary: CFString,
    // Current mod status
    pub status: ModStatus,
    // Number of downloads for the mod
    #[serde(rename = "downloadCount")]
    pub download_count: i64,
    // Whether the mod is included in the featured mods list
    #[serde(rename = "isFeatured")]
    pub is_featured: bool,
    // The main category of the mod as it was chosen by the mod author
    #[serde(rename = "primaryCategoryId")]
    pub primary_category_id: i64,
    // List of categories that this mod is related to
    pub categories: Vec<Category>,
    // The class id this mod belongs to
    #[serde(rename = "classId")]
    pub class_id: Option<i64>,
    // List of the mod's authors
    pub authors: Vec<ModAuthor>,
    // The mod's logo asset
    pub logo: ModAsset,
    // List of screenshots assets
    pub screenshots: Vec<ModAsset>,
    // The id of the main file of the mod
    #[serde(rename = "mainFileId")]
    pub main_file_id: i64,
    // List of latest files of the mod
    #[serde(rename = "latestFiles")]
    pub latest_files: Vec<File>,
    // List of file related details for the latest files of the mod
    #[serde(rename = "latestFilesIndexes")]
    pub latest_files_indexes: Vec<FileIndex>,
    // The creation date of the mod
    #[serde(rename = "dateCreated")]
    pub date_created: CFString,
    // The last time the mod was modified
    #[serde(rename = "dateModified")]
    pub date_modified: CFString,
    // The release date of the mod
    #[serde(rename = "dateReleased")]
    pub date_released: CFString,
    // Is mod allowed to be distributed
    #[serde(rename = "allowModDistribution")]
    pub allow_mod_distribution: Option<bool>,
    // The mod popularity rank for the game
    #[serde(rename = "gamePopularityRank")]
    pub game_popularity_rank: i64,
    // Is the mod available for search. This can be false when a mod is experimental, in a deleted state or has only alpha files
    #[serde(rename = "isAvailable")]
    pub is_available: bool,
    // The mod's thumbs up count
    #[serde(rename = "thumbsUpCount")]
    pub thumbs_up_count: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ModAsset {
    pub id: i64,
    #[serde(rename = "modId")]
    pub mod_id: i64,
    pub title: CFString,
    pub description: CFString,
    #[serde(rename = "thumbnailUrl")]
    pub thumbnail_url: CFString,
    pub url: CFString,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct File {
    // The file id
    pub id: i64,
    // The game id related to the mod that this file belongs to
    #[serde(rename = "gameId")]
    pub game_id: i64,
    // The mod id
    #[serde(rename = "modId")]
    pub mod_id: i64,
    // Whether the file is available to download
    #[serde(rename = "isAvailable")]
    pub is_available: bool,
    // Display name of the file
    #[serde(rename = "displayName")]
    pub display_name: CFString,
    // Exact file name
    #[serde(rename = "fileName")]
    pub file_name: CFString,
    // The file release type
    #[serde(rename = "releaseType")]
    pub release_type: FileReleaseType,
    // Status of the file
    #[serde(rename = "fileStatus")]
    pub file_status: FileStatus,
    // The file hash (i.e. md5 or sha1)
    pub hashes: Vec<FileHash>,
    // The file timestamp
    #[serde(rename = "fileDate")]
    pub file_date: CFString,
    // The file length in bytes
    #[serde(rename = "fileLength")]
    pub file_length: i64,
    // The number of downloads for the file
    #[serde(rename = "downloadCount")]
    pub download_count: i64,
    // The file download URL
    #[serde(rename = "downloadUrl")]
    pub download_url: CFString,
    // List of game versions this file is relevant for
    #[serde(rename = "gameVersions")]
    pub game_versions: Vec<CFString>,
    // Metadata used for sorting by game versions
    #[serde(rename = "sortableGameVersions")]
    pub sortable_game_versions: Vec<SortableGameVersion>,
    // List of dependencies files
    pub dependencies: Vec<FileDependency>,
    #[serde(rename = "exposeAsAlternative")]
    pub expose_as_alternative: Option<bool>,
    #[serde(rename = "parentProjectFileId")]
    pub parent_project_file_id: Option<i64>,
    #[serde(rename = "alternateFileId")]
    pub alternate_file_id: Option<i64>,
    #[serde(rename = "isServerPack")]
    pub is_server_pack: Option<bool>,
    #[serde(rename = "serverPackFileId")]
    pub server_pack_file_id: Option<i64>,
    #[serde(rename = "fileFingerprint")]
    pub file_fingerprint: i64,
    pub modules: Vec<FileModule>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FileDependency {
    #[serde(rename = "modId")]
    pub mod_id: i64,
    // None
    #[serde(rename = "relationType")]
    pub relation_type: FileRelationType,
}

cf_enum! {FileReleaseType, [derive(Serialize_repr, PartialEq, Debug, Clone)],
    Release = 1,
    Beta = 2,
    @Alpha = 3
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FileIndex {
    #[serde(rename = "gameVersion")]
    pub game_version: CFString,
    #[serde(rename = "fileId")]
    pub file_id: i64,
    pub filename: CFString,
    // None
    #[serde(rename = "releaseType")]
    pub release_type: FileReleaseType,
    #[serde(rename = "gameVersionTypeId")]
    pub game_version_type_id: Option<i64>,
    // None
    #[serde(rename = "modLoader")]
    pub mod_loader: ModLoaderType,
}

cf_enum! {ModLoaderType, [derive(Serialize_repr, PartialEq, Debug, Clone)],
    @Any = 0,
    Forge = 1,
    Cauldron = 2,
    LiteLoader = 3,
    Fabric = 4,
    Quilt = 5
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ModLinks {
    #[serde(rename = "websiteUrl")]
    pub website_url: CFString,
    #[serde(rename = "wikiUrl")]
    pub wiki_url: CFString,
    #[serde(rename = "issuesUrl")]
    pub issues_url: CFString,
    #[serde(rename = "sourceUrl")]
    pub source_url: CFString,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FileModule {
    pub name: CFString,
    pub fingerprint: i64,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct SortableGameVersion {
    // Original version name (e.g. 1.5b)
    #[serde(rename = "gameVersionName")]
    pub game_version_name: CFString,
    // Used for sorting (e.g. 0000000001.0000000005)
    #[serde(rename = "gameVersionPadded")]
    pub game_version_padded: CFString,
    // game version clean name (e.g. 1.5)
    #[serde(rename = "gameVersion")]
    pub game_version: CFString,
    // Game version release date
    #[serde(rename = "gameVersionReleaseDate")]
    pub game_version_release_date: CFString,
    // Game version type id
    #[serde(rename = "gameVersionTypeId")]
    pub game_version_type_id: Option<i64>,
}

cf_enum! {FileRelationType, [derive(Serialize_repr, PartialEq, Debug, Clone)],
    EmbeddedLibrary = 1,
    @OptionalDependency = 2,
    RequiredDependency = 3,
    Tool = 4,
    Incompatible = 5,
    Include = 6
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ModAuthor {
    pub id: i64,
    pub name: CFString,
    pub url: CFString,
}

cf_enum! {ModStatus, [derive(Serialize_repr, PartialEq, Debug, Clone)],
    @New = 1,
    ChangesRequired = 2,
    UnderSoftReview = 3,
    Approved = 4,
    Rejected = 5,
    ChangesMade = 6,
    Inactive = 7,
    Abandoned = 8,
    Deleted = 9,
    UnderReview = 10
}

cf_enum! {FileStatus, [derive(Serialize_repr, PartialEq, Debug, Clone)],
    @Processing = 1,
    ChangesRequired = 2,
    UnderReview = 3,
    Approved = 4,
    Rejected = 5,
    MalwareDetected = 6,
    Deleted = 7,
    Archived = 8,
    Testing = 9,
    Released = 10,
    ReadyForReview = 11,
    Deprecated = 12,
    Baking = 13,
    AwaitingPublishing = 14,
    FailedPublishing = 15
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Category {
    // The category id
    pub id: i64,
    // The game id related to the category
    #[serde(rename = "gameId")]
    pub game_id: i64,
    // Category name
    pub name: CFString,
    // The category slug as it appear in the URL
    pub slug: CFString,
    // The category URL
    pub url: CFString,
    // URL for the category icon
    #[serde(rename = "iconUrl")]
    pub icon_url: CFString,
    // Last modified date of the category
    #[serde(rename = "dateModified")]
    pub date_modified: CFString,
    // A top level category for other categories
    #[serde(rename = "isClass")]
    pub is_class: Option<bool>,
    // The class id of the category, meaning - the class of which this category is under
    #[serde(rename = "classId")]
    pub class_id: Option<i64>,
    // The parent category for this category
    #[serde(rename = "parentCategoryId")]
    pub parent_category_id: Option<i64>,
    // The display index for this category
    #[serde(rename = "displayIndex")]
    pub display_index: Option<i64>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FileHash {
    pub value: CFString,
    // None
    pub algo: HashAlgo,
}

cf_enum! {HashAlgo, [derive(Serialize_repr, PartialEq, Debug, Clone)],
    @Sha1 = 1,
    Md5 = 2
}

